// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicXmlDb.Server.ScoreDocuments;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MusicXmlDb.Server.Migrations
{
    [DbContext(typeof(ScoreDocumentContext))]
    [Migration("20250309101352_InitalMigration")]
    partial class InitalMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ScoreDocuments")
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MusicXmlDb.Server.MusicXmlDocuments.MusicXmlDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ScoreDocumentHistoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScoreDocumentHistoryId")
                        .IsUnique();

                    b.ToTable("MusicXmlDocuments", "ScoreDocuments");
                });

            modelBuilder.Entity("MusicXmlDb.Server.ScoreDocuments.ScoreDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ScoreDocuments", "ScoreDocuments");
                });

            modelBuilder.Entity("MusicXmlDb.Server.ScoreDocuments.ScoreDocumentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ScoreDocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ScoreDocumentId");

                    b.ToTable("ScoreDocumentHistories", "ScoreDocuments");
                });

            modelBuilder.Entity("MusicXmlDb.Server.MusicXmlDocuments.MusicXmlDocument", b =>
                {
                    b.HasOne("MusicXmlDb.Server.ScoreDocuments.ScoreDocumentHistory", "ScoreDocumentHistory")
                        .WithOne("MusicXmlDocument")
                        .HasForeignKey("MusicXmlDb.Server.MusicXmlDocuments.MusicXmlDocument", "ScoreDocumentHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoreDocumentHistory");
                });

            modelBuilder.Entity("MusicXmlDb.Server.ScoreDocuments.ScoreDocumentHistory", b =>
                {
                    b.HasOne("MusicXmlDb.Server.ScoreDocuments.ScoreDocument", "ScoreDocument")
                        .WithMany("History")
                        .HasForeignKey("ScoreDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoreDocument");
                });

            modelBuilder.Entity("MusicXmlDb.Server.ScoreDocuments.ScoreDocument", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("MusicXmlDb.Server.ScoreDocuments.ScoreDocumentHistory", b =>
                {
                    b.Navigation("MusicXmlDocument")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
